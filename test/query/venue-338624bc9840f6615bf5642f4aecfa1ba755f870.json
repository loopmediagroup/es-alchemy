{
  "orderBy": null,
  "index": {
    "fields": [
      "id",
      "name",
      "desc",
      "location"
    ],
    "model": "venue",
    "nested": {
      "types": {
        "sources": [
          "types",
          "offers.types"
        ],
        "model": "loop",
        "fields": [
          "id"
        ]
      },
      "offers": {
        "sources": [
          "offers"
        ],
        "model": "offer",
        "fields": [
          "id",
          "name",
          "desc",
          "exclusive",
          "flagged",
          "is_limited",
          "placement_priority",
          "returned_for_type_a",
          "returned_for_type_c",
          "returned_for_type_b",
          "min_version"
        ]
      },
      "collections": {
        "sources": [
          "offers.collections"
        ],
        "model": "collection",
        "fields": [
          "id"
        ]
      },
      "availabilities": {
        "sources": [
          "offers.availabilities"
        ],
        "model": "schedule",
        "fields": [
          "id",
          "starts",
          "ends",
          "enabled",
          "created"
        ]
      },
      "keywords": {
        "sources": [
          "offers.keywords"
        ],
        "model": "keyword",
        "fields": [
          "id",
          "names"
        ]
      },
      "business": {
        "sources": [
          "business"
        ],
        "model": "business",
        "fields": [
          "id",
          "name"
        ]
      },
      "regions": {
        "sources": [
          "regions",
          "regions.intersects",
          "offers.regions",
          "offers.regions.intersects"
        ],
        "model": "region",
        "fields": [
          "id",
          "location"
        ]
      },
      "categories": {
        "sources": [
          "categories"
        ],
        "model": "category",
        "fields": [
          "id",
          "name"
        ]
      },
      "primary_types": {
        "flat": true,
        "model": "loop",
        "fields": [
          "id",
          "score_distance_scale",
          "score_random_scale"
        ],
        "sources": [
          "loop",
          "offers.types"
        ]
      }
    },
    "sources": [
      ""
    ]
  },
  "limit": 2,
  "result": {
    "sort": [
      {
        "_score": {
          "order": "desc"
        }
      },
      {
        "_id": {
          "order": "asc"
        }
      }
    ],
    "query": {
      "bool": {
        "should": [
          {
            "function_score": {
              "script_score": {
                "script": {
                  "source": "0"
                }
              },
              "query": {
                "match_all": {}
              },
              "score_mode": "max"
            }
          },
          {
            "nested": {
              "path": "primary_types",
              "query": {
                "function_score": {
                  "script_score": {
                    "script": {
                      "lang": "painless",
                      "inline": "\n\ndouble remap(def value, def map) {\n  if (map[map.length - 2] <= value) {\n    return map[map.length - 1];\n  }\n  for (int i = map.length - 4; i >= 0; i -= 2) {\n    if (map[i] <= value) {\n      double percent = (value - map[i]) / (double)(map[i + 2] - map[i]);\n      return map[i + 1] + (map[i + 3] - map[i + 1]) * percent;\n    }\n  }\n  return map[1];\n}\n\nint a = [doc[params.target].value, params.seed].hashCode();\na -= (a<<6);a ^= (a>>17);a -= (a<<9);a ^= (a<<4);\na -= (a<<3);a ^= (a<<10);a ^= (a>>15);\ndouble result = (Math.abs(a) / (double)Integer.MAX_VALUE) - 0.5;\nreturn remap(result, params.map);\n",
                      "params": {
                        "target": "primary_types.score_random_scale",
                        "seed": "783e70a5-c716-4025-b5a4-68854c14e9d7",
                        "map": [
                          0,
                          1
                        ]
                      }
                    }
                  },
                  "score_mode": "max",
                  "boost_mode": "replace",
                  "query": {
                    "match_all": {}
                  }
                }
              },
              "score_mode": "max"
            }
          }
        ]
      }
    },
    "from": 0,
    "size": 2,
    "_source": [
      "id"
    ]
  },
  "filterBy": null,
  "toReturn": [
    "id"
  ],
  "offset": 0,
  "scoreBy": [
    [
      "random",
      "primary_types.score_random_scale",
      "783e70a5-c716-4025-b5a4-68854c14e9d7",
      [
        [
          0,
          1
        ]
      ]
    ]
  ]
}
